{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "# # Setting UP \n",
    "\n",
    "# In[3]:\n",
    "\n",
    "\n",
    "# Import BeautifulSoup\n",
    "from bs4 import BeautifulSoup\n",
    "from splinter import Browser\n",
    "import pandas as pd\n",
    "import datetime as dt \n",
    "\n",
    "\n",
    "\n",
    "# In[13]:\n",
    "\n",
    "\n",
    "# Set the executable path and initialize the chrome browser \n",
    "# ----------------------MAC-----------------------------------------\n",
    "executable_path = {'executable_path': '/usr/local/bin/chromedriver'}\n",
    "browser = Browser('chrome', **executable_path)\n",
    "\n",
    "# ======================Windows=====================================\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def mars_news(browser):\n",
    "    url = 'https://mars.nasa.gov/news/'\n",
    "    # Visit the mars nasa new site\n",
    "    browser.visit(url)\n",
    "\n",
    "    # Get first list item and wait half a second if not immediately present\n",
    "    browser.is_element_present_by_css('ul.item_list li.slide', wait_time=0.5)\n",
    "    \n",
    "    html = browser.html\n",
    "    news_soup = BeautifulSoup(html, 'html.parser')\n",
    "    # print(news_soup)\n",
    "\n",
    "    # slide element everythin in the \n",
    "    # <ul class=\"item_list\">\n",
    "    #     <li class=\"slide\">\n",
    "    #     ....\n",
    "    # </ul>\n",
    "    try:\n",
    "        slide_element = news_soup.select_one('ul.item_list li.slide')\n",
    "        slide_element.find(\"div\", class_=\"content_title\")\n",
    "\n",
    "        # Use the parent element to find the first a tag and save it as news_title\n",
    "        news_title = slide_element.find('div', class_=\"content_title\").get_text()\n",
    "\n",
    "\n",
    "        news_paragraph = slide_element.find('div', class_=\"article_teaser_body\").get_text()\n",
    "    except AttributeError:\n",
    "        return None, None\n",
    "    return news_title, news_paragraph\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Visit URL\n",
    "def featured_image(browser):\n",
    "    url = 'https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars'\n",
    "    browser.visit(url)\n",
    "\n",
    "    # Asking splinter to go to the site hit a button with class name full_image\n",
    "    # <button class=\"full_image\">Full Image</button>\n",
    "    full_image_button = browser.find_by_id('full_image')\n",
    "    full_image_button.click()\n",
    "\n",
    "\n",
    "    # Find the more info button and click that\n",
    "    browser.is_element_present_by_text('more info', wait_time=1)\n",
    "    more_info_element = browser.find_link_by_partial_text('more info')\n",
    "    more_info_element.click()\n",
    "\n",
    "    # Parse the results html with soup\n",
    "    html = browser.html\n",
    "    image_soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "    img = image_soup.select_one('figure.lede a img')\n",
    "    try:\n",
    "        img_url = img.get('src')\n",
    "    except AttributeError:\n",
    "        return None \n",
    "    # Use the base url to create an absolute url\n",
    "    img_url = f'https://www.jpl.nasa.gov{img_url}'\n",
    "    return img_url\n",
    "\n",
    "\n",
    "def twitter_weather(browser):\n",
    "    url = 'https://twitter.com/marswxreport?lang=en'\n",
    "    browser.visit(url)\n",
    "    \n",
    "    html = browser.html\n",
    "    weather_soup = BeautifulSoup(html, 'html.parser')\n",
    "    mars_weather_tweet = weather_soup.find('div', \n",
    "                                       attrs={\n",
    "                                           \"class\": \"tweet\", \n",
    "                                            \"data-name\": \"Mars Weather\"\n",
    "                                        })\n",
    "    # Next search within the tweet for p tag containing the tweet text\n",
    "    mars_weather = mars_weather_tweet.find('p', 'tweet-text').get_text()\n",
    "    return mars_weather\n",
    "\n",
    "\n",
    "def hemisphere(browser):\n",
    "    url = 'https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars'\n",
    "    browser.visit(url)\n",
    "    hemisphere_image_urls = []\n",
    "\n",
    "    # First get a list og all the hemisphers\n",
    "    links = browser.find_by_css('a.product-item h3')\n",
    "    for item in range(len(links)):\n",
    "        hemisphere = {}\n",
    "        \n",
    "        # We have to find the element on each loop to avoid a stale element exception\n",
    "        browser.find_by_css('a.product-item h3')[item].click()\n",
    "        \n",
    "        # Next we find the Sample Image anchor tage and extract the href\n",
    "        sample_element = browser.find_link_by_text('Sample').first\n",
    "        hemisphere['img_url'] = sample_element['href']\n",
    "        \n",
    "        \n",
    "        # Get Hemispher title \n",
    "        hemisphere['title'] = browser.find_by_css('h2.title').text\n",
    "        \n",
    "        #Append hemispher object to list\n",
    "        hemisphere_image_urls.append(hemisphere)\n",
    "        \n",
    "        # Finally, we navigate backwards\n",
    "        browser.back()\n",
    "    return hemisphere_image_urls\n",
    "\n",
    "def scrape_hemisphere(html_text):\n",
    "    hemisphere_soup = BeautifulSoup(html_text, 'html.parser')\n",
    "\n",
    "    try: \n",
    "        title_element = hemisphere_soup.find('h2', class_=\"title\").get_text()\n",
    "        sample_element = hemisphere_soup.find('a', text=\"Sample\").get('href')\n",
    "    except AttributeError:\n",
    "        title_element = None\n",
    "        sample_element = None \n",
    "    hemisphere = {\n",
    "        \"title\": title_element,\n",
    "        \"img_url\": sample_element\n",
    "    }\n",
    "    return hemisphere\n",
    "\n",
    "\n",
    "def mars_facts():\n",
    "    try:\n",
    "        df = pd.read_html('https://space-facts.com/mars/')[0]\n",
    "    except BaseException:\n",
    "        return None\n",
    "    df.columns=['description', 'value']\n",
    "    df.set_index('description', inplace=True)\n",
    "\n",
    "    return df.to_html(classes=\"table table-striped\")\n",
    "\n",
    "\n",
    "\n",
    "def scrape_all(): # main bot \n",
    "    executable_path = {'executable_path': '/usr/local/bin/chromedriver'}\n",
    "    browser = Browser('chrome', **executable_path)\n",
    "    news_title, news_paragraph = mars_news(browser)\n",
    "    img_url = featured_image(browser)\n",
    "    mars_weather = twitter_weather(browser)\n",
    "    hemisphere_image_urls = hemisphere(browser)\n",
    "    facts = mars_facts()\n",
    "    timestamp = dt.datetime.now()\n",
    "\n",
    "    data = {\n",
    "        \"news_title\": news_title,\n",
    "        \"news_paragraph\": news_paragraph,\n",
    "        \"featured_image\": img_url,\n",
    "        \"hemispheres\": hemisphere_image_urls,\n",
    "        \"weather\": mars_weather,\n",
    "        \"facts\": facts,\n",
    "        \"last_modified\": timestamp\n",
    "    }\n",
    "    browser.quit()\n",
    "    return data \n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(scrape_all())\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# # MARS WEATHER\n",
    "\n",
    "# In[42]:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# In[43]:\n",
    "\n",
    "\n",
    "# In[44]:\n",
    "\n",
    "\n",
    "# First find a tweet with the data-name `Mars Weather`\n",
    "\n",
    "\n",
    "\n",
    "# In[41]:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# In[47]:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# In[49]:\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "# In[50]:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# # MARS FACTS \n",
    "\n",
    "# In[52]:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# In[ ]:\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
